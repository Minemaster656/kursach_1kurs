import sympy as sp
from sympy.parsing.latex import parse_latex
from sympy.parsing.sympy_parser import parse_expr, standard_transformations, implicit_multiplication_application
import re
import matplotlib.pyplot as plt
from typing import Dict, List, Union, Optional, Tuple, Any
from colorama import Fore, Style, init
import warnings
import sys
import textwrap

warnings.filterwarnings('ignore')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç ollama
try:
    import ollama

    OLLAMA_AVAILABLE = True
except ImportError:
    OLLAMA_AVAILABLE = False


def check_ollama_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Ollama"""
    if not OLLAMA_AVAILABLE:
        print(f"{Fore.RED}‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        print(f"{Fore.YELLOW}–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: pip install ollama")
        print(f"{Fore.CYAN}–¢–∞–∫–∂–µ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ:")
        print(f"{Fore.CYAN}–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: https://ollama.com/download")
        return False

    try:
        ollama.list()
        return True
    except Exception as e:
        print(f"{Fore.RED}‚ùå Ollama —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        print(f"{Fore.YELLOW}–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Ollama –∑–∞–ø—É—â–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
        print(f"{Fore.CYAN}–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: https://ollama.com/download")
        print(f"{Fore.RED}–û—à–∏–±–∫–∞: {e}")
        return False


def parse_with_implicit_multiplication(expression):
    transformations = standard_transformations + (implicit_multiplication_application,)
    return parse_expr(expression, transformations=transformations)


def render_latex_output(expression, step_name="", enable_latex=False):
    """–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ LaTeX —Ñ–æ—Ä–º–∞—Ç."""
    if not enable_latex:
        return expression

    try:
        from sympy import latex, sympify
        from sympy.parsing.sympy_parser import parse_expr

        try:
            sympy_expr = parse_expr(expression)
            latex_expr = latex(sympy_expr)
            if step_name:
                return f"{step_name}: {expression}"
            else:
                return f"{expression}"
        except:
            if step_name:
                return f"{step_name}: {expression}"
            else:
                return expression
    except ImportError:
        if step_name:
            return f"{step_name}: {expression}"
        else:
            return expression


def create_latex_steps_log():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–∞ —à–∞–≥–æ–≤ –¥–ª—è LaTeX."""
    return []


def add_latex_step(steps_log, step_name, expression, enable_latex=False):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞ –≤ –ª–æ–≥ LaTeX."""
    formatted_step = render_latex_output(expression, step_name, enable_latex)
    steps_log.append(formatted_step)


def export_latex_steps(steps_log, filename="processing_steps.md"):
    """–≠–∫—Å–ø–æ—Ä—Ç —à–∞–≥–æ–≤ –≤ Markdown —Å LaTeX."""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write("# –®–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n\n")
            for i, step in enumerate(steps_log, 1):
                f.write(f"{i}. {step}\n")
        print(f"–®–∞–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


class AISettings:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò"""

    def __init__(self):
        self.show_steps = True
        self.ai_error_explanations = False
        self.ai_step_explanations = False
        self.model = "gemma3:4b-it-qat"
        self.skip_model_check = False


class OllamaAI:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Ollama –ò–ò"""

    def __init__(self, settings: AISettings):
        self.settings = settings
        self.conversation_history = []

        self.system_prompts = {
            'dialog': """–¢—ã –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –∏ —Ä–µ—à–µ–Ω–∏–∏ –∞–ª–≥–µ–±—Ä–∞–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á —Å –ø–æ–º–æ—â—å—é SymPy. 
            –ü–æ–º–æ–≥–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è SymPy. 
            –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â—å —Å —Ñ–æ—Ä–º—É–ª–æ–π, –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–ø–∏—Å–∏.
            –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è: sqrt() –¥–ª—è –∫–æ—Ä–Ω—è, log() –¥–ª—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞—Ä–∏—Ñ–º–∞, 
            sin(), cos(), tan() –¥–ª—è —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π, pi –¥–ª—è —á–∏—Å–ª–∞ œÄ, E –¥–ª—è —á–∏—Å–ª–∞ e.""",

            'error': """–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –≤ SymPy.
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—à–∏–±–∫—É –∏ –æ–±—ä—è—Å–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º, —á—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.
            –ë—É–¥—å –∫—Ä–∞—Ç–æ–∫ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–µ–Ω. –ü—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–ø–∏—Å–∏.""",

            'explanation': """–¢—ã –æ–±—ä—è—Å–Ω—è–µ—à—å —ç—Ç–∞–ø—ã —Ä–µ—à–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á –≤ SymPy.
            –î–ª—è –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞ –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.
            –ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Å—Ç–æ–π —è–∑—ã–∫, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤."""
        }

    def check_model_availability(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏"""
        if self.settings.skip_model_check:
            return True

        try:
            models_response = ollama.list()
            available_models = []
            if 'models' in models_response:
                for model in models_response['models']:
                    model_name = model.get('name') or model.get('model', '')
                    if model_name:
                        available_models.append(model_name)

            if self.settings.model not in available_models:
                print(f"{Fore.YELLOW}‚ö†Ô∏è –ú–æ–¥–µ–ª—å {self.settings.model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                print(f"{Fore.CYAN}–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {available_models}")
                print(f"{Fore.CYAN}–°–∫–∞—á–∏–≤–∞—é –º–æ–¥–µ–ª—å...")
                try:
                    ollama.pull(self.settings.model)
                    print(f"{Fore.GREEN}‚úÖ –ú–æ–¥–µ–ª—å {self.settings.model} —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–∞")
                    return True
                except Exception as e:
                    print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
                    print(f"{Fore.YELLOW}üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é: ollama pull {self.settings.model}")
                    return False
            return True
        except Exception as e:
            print(f"{Fore.RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            print(f"{Fore.YELLOW}üí° –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ–ª–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return False

    def chat(self, message: str, prompt_type: str = 'dialog', include_history: bool = True):
        """–û–±—â–µ–Ω–∏–µ —Å –ò–ò"""
        if not check_ollama_installation():
            return "Ollama –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

        if not self.check_model_availability():
            return "–ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

        try:
            messages = []

            if prompt_type in self.system_prompts:
                messages.append({
                    'role': 'system',
                    'content': self.system_prompts[prompt_type]
                })

            if include_history and prompt_type == 'dialog':
                messages.extend(self.conversation_history)

            messages.append({
                'role': 'user',
                'content': message
            })

            response = ollama.chat(
                model=self.settings.model,
                messages=messages
            )

            ai_response = response['message']['content']

            if include_history and prompt_type == 'dialog':
                self.conversation_history.append({'role': 'user', 'content': message})
                self.conversation_history.append({'role': 'assistant', 'content': ai_response})

                if len(self.conversation_history) > 20:
                    self.conversation_history = self.conversation_history[-20:]

            return ai_response

        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ò–ò: {e}"

    def explain_error(self, error_msg: str, expression: str):
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏"""
        if not self.settings.ai_error_explanations:
            return None

        prompt = f"–í—ã—Ä–∞–∂–µ–Ω–∏–µ: '{expression}'\n–û—à–∏–±–∫–∞: {error_msg}\n–û–±—ä—è—Å–Ω–∏ –æ—à–∏–±–∫—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
        return self.chat(prompt, 'error', include_history=False)

    def explain_step(self, step_name: str, input_expr: str, output_expr: str):
        """–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–∞ —Ä–µ—à–µ–Ω–∏—è"""
        if not self.settings.ai_step_explanations:
            return None

        prompt = f"–≠—Ç–∞–ø: {step_name}\n–í—Ö–æ–¥: {input_expr}\n–í—ã—Ö–æ–¥: {output_expr}\n–û–±—ä—è—Å–Ω–∏ —ç—Ç–æ—Ç —ç—Ç–∞–ø —Ä–µ—à–µ–Ω–∏—è:"
        return self.chat(prompt, 'explanation', include_history=False)

    def interactive_mode(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –ò–ò"""
        print(f"{Fore.CYAN}{'=' * 60}")
        print(f"{Fore.CYAN}ü§ñ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ò–ò –ø–æ–º–æ—â–Ω–∏–∫ (Ollama)")
        print(f"{Fore.CYAN}–ú–æ–¥–µ–ª—å: {self.settings.model}")
        print(f"{Fore.CYAN}{'=' * 60}")
        print(f"{Fore.WHITE}–î–ª—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        print(f"{Fore.WHITE}–ö–æ–º–∞–Ω–¥—ã: '–≤—ã—Ö–æ–¥', 'exit', 'quit', '–æ—á–∏—Å—Ç–∏—Ç—å' –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏")
        print(f"{Fore.CYAN}{'=' * 60}")

        if not check_ollama_installation() or not self.check_model_availability():
            return

        while True:
            try:
                print(f"{Fore.GREEN}–í—ã:", end=" ")

                lines = []
                while True:
                    line = input()
                    if line.strip() == "":
                        break
                    lines.append(line)

                user_input = "\n".join(lines).strip()

                if not user_input:
                    continue

                if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit']:
                    print(f"{Fore.YELLOW}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                    break

                if user_input.lower() in ['–æ—á–∏—Å—Ç–∏—Ç—å', 'clear', '–∏—Å—Ç–æ—Ä–∏—è']:
                    self.conversation_history = []
                    print(f"{Fore.YELLOW}–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞")
                    continue

                print(f"{Fore.BLUE}ü§ñ –ò–ò: {Fore.WHITE}", end="")
                response = self.chat(user_input, 'dialog')

                wrapped_response = textwrap.fill(response, width=80)
                for line in wrapped_response.split('\n'):
                    print(f"{Fore.WHITE}{line}")

                print()

            except KeyboardInterrupt:
                print(f"\n{Fore.YELLOW}–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! üëã")
                break
            except Exception as e:
                print(f"{Fore.RED}–û—à–∏–±–∫–∞: {e}")


class AdvancedMathProcessor:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SymPy –∏ –ò–ò"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ SymPy –∏ –ò–ò"""
        sp.init_printing(use_unicode=True, wrap_line=False)

        print(f"{Fore.CYAN}üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞")
        self.ai_settings = AISettings()
        self.setup_ai_settings()

        self.ai = OllamaAI(self.ai_settings) if OLLAMA_AVAILABLE else None

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –∑–∞–º–µ–Ω –∏–∑ processor2.py
        self.cyrillic_replacements = {
            '—Ö': 'x', '—É': 'y', '–∑': 'z', '–∞': 'a', '–±': 'b', '–≤': 'c',
            '–ø': 'pi', '–µ': 'E'
        }

        self.symbol_replacements = {
            '^': '**',
            '‚àö': 'sqrt',
            '‚àû': 'oo',
            '¬±': '+/-',
            '√ó': '*',
            '√∑': '/',
        }

        self.function_replacements = {
            'ln': 'log',
            'lg': 'log10',
            'arctg': 'atan',
            'arcsin': 'asin',
            'arccos': 'acos',
            'sh': 'sinh',
            'ch': 'cosh',
            'th': 'tanh'
        }

    def setup_ai_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ò–ò"""
        print(f"{Fore.YELLOW}–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–∞:")

        while True:
            show_steps = input(f"{Fore.CYAN}1. –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —ç—Ç–∞–ø—ã —Ä–µ—à–µ–Ω–∏—è? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é y): ").strip().lower()
            if show_steps in ['', 'y', 'yes', '–¥–∞', '–¥']:
                self.ai_settings.show_steps = True
                break
            elif show_steps in ['n', 'no', '–Ω–µ—Ç', '–Ω']:
                self.ai_settings.show_steps = False
                break
            else:
                print(f"{Fore.RED}–í–≤–µ–¥–∏—Ç–µ y/n")

        while True:
            ai_errors = input(
                f"{Fore.CYAN}2. –í–∫–ª—é—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –æ—Ç –ò–ò? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é n): ").strip().lower()
            if ai_errors in ['y', 'yes', '–¥–∞', '–¥']:
                self.ai_settings.ai_error_explanations = True
                break
            elif ai_errors in ['', 'n', 'no', '–Ω–µ—Ç', '–Ω']:
                self.ai_settings.ai_error_explanations = False
                break
            else:
                print(f"{Fore.RED}–í–≤–µ–¥–∏—Ç–µ y/n")

        if self.ai_settings.show_steps:
            while True:
                ai_steps = input(
                    f"{Fore.CYAN}3. –í–∫–ª—é—á–∏—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤ –æ—Ç –ò–ò? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é n): ").strip().lower()
                if ai_steps in ['y', 'yes', '–¥–∞', '–¥']:
                    self.ai_settings.ai_step_explanations = True
                    break
                elif ai_steps in ['', 'n', 'no', '–Ω–µ—Ç', '–Ω']:
                    self.ai_settings.ai_step_explanations = False
                    break
                else:
                    print(f"{Fore.RED}–í–≤–µ–¥–∏—Ç–µ y/n")
        else:
            self.ai_settings.ai_step_explanations = False

        while True:
            skip_check = input(
                f"{Fore.CYAN}4. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –º–æ–¥–µ–ª–∏ Ollama? (y/n, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é n): ").strip().lower()
            if skip_check in ['y', 'yes', '–¥–∞', '–¥']:
                self.ai_settings.skip_model_check = True
                break
            elif skip_check in ['', 'n', 'no', '–Ω–µ—Ç', '–Ω']:
                self.ai_settings.skip_model_check = False
                break
            else:
                print(f"{Fore.RED}–í–≤–µ–¥–∏—Ç–µ y/n")

        print(f"{Fore.GREEN}‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ò–ò —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")

    def detect_input_type(self, expression: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
        # LaTeX –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        latex_patterns = [
            r'\\[a-zA-Z]+',  # LaTeX –∫–æ–º–∞–Ω–¥—ã
            r'\{.*\}',  # –§–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏
            r'\\frac',  # –î—Ä–æ–±–∏
            r'\\sqrt',  # –ö–æ—Ä–Ω–∏
            r'\\int',  # –ò–Ω—Ç–µ–≥—Ä–∞–ª—ã
        ]

        if any(re.search(pattern, expression) for pattern in latex_patterns):
            return 'latex'
        return 'mathematical'

    def preprocess_text(self, expression: str) -> str:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –∑–∞–º–µ–Ω"""
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        expression = re.sub(r'\s+', ' ', expression.strip())

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–ù–ê–ß–ê–õ–ê –∑–∞–º–µ–Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π (–¥–æ –Ω–µ—è–≤–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è!)
        function_patterns = [
            (r'\blg\b', 'log10'),  # lg -> log10
            (r'\bln\b', 'log'),  # ln -> log
            (r'\barctg\b', 'atan'),  # arctg -> atan
            (r'\barcsin\b', 'asin'),  # arcsin -> asin
            (r'\barccos\b', 'acos'),  # arccos -> acos
            (r'\bsh\b', 'sinh'),  # sh -> sinh
            (r'\bch\b', 'cosh'),  # ch -> cosh
            (r'\bth\b', 'tanh'),  # th -> tanh
        ]

        for pattern, replacement in function_patterns:
            expression = re.sub(pattern, replacement, expression)

        # –ó–∞–º–µ–Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        for cyrillic, latin in self.cyrillic_replacements.items():
            expression = expression.replace(cyrillic, latin)

        # –ó–∞–º–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        for symbol, replacement in self.symbol_replacements.items():
            expression = expression.replace(symbol, replacement)

        return expression

    def handle_mathematical_notation(self, expression: str) -> sp.Expr:
        """–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–æ—Ç–∞—Ü–∏–∏ –ë–ï–ó variable-width lookbehind"""

        # –°–ø–∏—Å–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ —Ñ—É–Ω–∫—Ü–∏–π
        protected_words = [
            'pi', 'E', 'oo', 'I',  # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
            'sin', 'cos', 'tan', 'cot', 'sec', 'csc',  # –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ
            'asin', 'acos', 'atan', 'acot', 'asec', 'acsc',  # –û–±—Ä–∞—Ç–Ω—ã–µ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ
            'sinh', 'cosh', 'tanh', 'coth', 'sech', 'csch',  # –ì–∏–ø–µ—Ä–±–æ–ª–∏—á–µ—Å–∫–∏–µ
            'log', 'log10', 'ln', 'exp', 'sqrt', 'cbrt',  # –õ–æ–≥–∞—Ä–∏—Ñ–º—ã –∏ –∫–æ—Ä–Ω–∏
            'factorial', 'gamma', 'beta',  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            'Abs', 'abs', 'Max', 'Min',  # –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
            'Sum', 'Product', 'Integral', 'Derivative'  # SymPy –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        ]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        function_patterns = [
            (r'log10\(([^)]+)\)', lambda m: str(sp.log(sp.sympify(m.group(1)), 10))),
            (r'log\(([^)]+)\)', lambda m: str(sp.log(sp.sympify(m.group(1))))),
            (r'sqrt\(([^)]+)\)', lambda m: str(sp.sqrt(sp.sympify(m.group(1))))),
            (r'sin\(([^)]+)\)', lambda m: str(sp.sin(sp.sympify(m.group(1))))),
            (r'cos\(([^)]+)\)', lambda m: str(sp.cos(sp.sympify(m.group(1))))),
            (r'tan\(([^)]+)\)', lambda m: str(sp.tan(sp.sympify(m.group(1))))),
            (r'factorial\(([^)]+)\)', lambda m: str(sp.factorial(sp.sympify(m.group(1))))),
            (r'exp\(([^)]+)\)', lambda m: str(sp.exp(sp.sympify(m.group(1))))),
        ]

        # –í—ã—á–∏—Å–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã - —á–∏—Å–ª–∞
        for pattern, replacement in function_patterns:
            def replace_func(match):
                try:
                    arg = match.group(1)
                    try:
                        arg_value = sp.sympify(arg)
                        if arg_value.is_number or not arg_value.free_symbols:
                            return replacement(match)
                        else:
                            return match.group(0)
                    except:
                        return match.group(0)
                except:
                    return match.group(0)

            expression = re.sub(pattern, replace_func, expression)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–µ–ø–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π: sin^2(x) -> sin(x)**2
        expression = re.sub(r'(\w+)\^(\d+)\(([^)]+)\)', r'\1(\3)**\2', expression)

        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –Ω–µ—è–≤–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ –ë–ï–ó variable-width lookbehind
        # –ú–µ—Ç–æ–¥ 1: –ó–∞—â–∏—â–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–∞—Ä–∫–µ—Ä–∞–º–∏

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–º–µ–Ω
        temp_replacements = {}
        temp_counter = 0

        # –ó–∞–º–µ–Ω—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        for word in protected_words:
            if word in expression:
                temp_marker = f"__TEMP_{temp_counter}__"
                temp_replacements[temp_marker] = word
                expression = expression.replace(word, temp_marker)
                temp_counter += 1

        # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ—è–≤–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ
        # 2x -> 2*x (—á–∏—Å–ª–æ + –±—É–∫–≤–∞)
        expression = re.sub(r'(\d+)([a-zA-Z_])', r'\1*\2', expression)

        # x2 -> x*2 (–±—É–∫–≤–∞ + —á–∏—Å–ª–æ)
        expression = re.sub(r'([a-zA-Z_])(\d+)', r'\1*\2', expression)

        # 2(x+1) -> 2*(x+1) (—á–∏—Å–ª–æ + —Å–∫–æ–±–∫–∞)
        expression = re.sub(r'(\d+)\(', r'\1*(', expression)

        # )(x -> )*(x (—Å–∫–æ–±–∫–∞ + –±—É–∫–≤–∞)
        expression = re.sub(r'\)([a-zA-Z_])', r')*\1', expression)

        # )2 -> )*2 (—Å–∫–æ–±–∫–∞ + —á–∏—Å–ª–æ)
        expression = re.sub(r'\)(\d+)', r')*\1', expression)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –æ–±—Ä–∞—Ç–Ω–æ
        for temp_marker, original_word in temp_replacements.items():
            expression = expression.replace(temp_marker, original_word)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥—É–ª–µ–π: |x| -> Abs(x)
        expression = re.sub(r'\|([^|]+)\|', r'Abs(\1)', expression)

        return parse_with_implicit_multiplication(expression)

    def parse_latex_expression(self, latex_expr: str) -> sp.Expr:
        """–ü–∞—Ä—Å–∏–Ω–≥ LaTeX –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            return parse_latex(latex_expr)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ LaTeX: {e}")
            # Fallback: —É–±–∏—Ä–∞–µ–º LaTeX –∫–æ–º–∞–Ω–¥—ã –∏ –ø–∞—Ä—Å–∏–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            cleaned = re.sub(r'\\[a-zA-Z]+\{([^}]+)\}', r'\1', latex_expr)
            cleaned = cleaned.replace('{', '').replace('}', '')
            return self.parse_mathematical_expression(cleaned)

    def parse_mathematical_expression(self, expression: str) -> sp.Expr:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞–∫ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
            if '=' in expression and not any(op in expression for op in ['<=', '>=', '==']):
                parts = expression.split('=')
                if len(parts) == 2:
                    left = self.preprocess_text(parts[0].strip())
                    right = self.preprocess_text(parts[1].strip())
                    left_expr = self.handle_mathematical_notation(left)
                    right_expr = self.handle_mathematical_notation(right)
                    return sp.Eq(left_expr, right_expr)

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π SymPy
            processed = self.preprocess_text(expression)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ integrate() - —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Integral
            if 'integrate(' in processed:
                # –ü–∞—Ä—Å–∏–º –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—é SymPy –±–µ–∑ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
                match = re.search(r'integrate\(([^,]+),\s*([^)]+)\)', processed)
                if match:
                    func_expr = sp.sympify(match.group(1))
                    var = sp.Symbol(match.group(2).strip())
                    return sp.Integral(func_expr, var)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ diff() - —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Derivative
            if 'diff(' in processed:
                match = re.search(r'diff\(([^,]+),\s*([^)]+)\)', processed)
                if match:
                    func_expr = sp.sympify(match.group(1))
                    var = sp.Symbol(match.group(2).strip())
                    return sp.Derivative(func_expr, var)

            return self.handle_mathematical_notation(processed)

        except Exception as e:
            raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ '{expression}': {e}")

    def validate_expression(self, expr: sp.Expr) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏ –∏ NaN
            if expr.has(sp.zoo) or expr.has(sp.nan):
                return False

            # –ü–æ–ø—ã—Ç–∫–∞ —É–ø—Ä–æ—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
            simplified = sp.simplify(expr)
            return True
        except Exception:
            return False

    def step1_parse_and_validate(self, user_input: str) -> Dict[str, Any]:
        """–≠—Ç–∞–ø 1: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è"""
        result = {
            'stage': '–≠—Ç–∞–ø 1: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è',
            'success': False,
            'input_type': None,
            'original_input': user_input,
            'preprocessed': None,
            'parsed_expression': None,
            'validation_result': False,
            'errors': []
        }

        try:
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≤–≤–æ–¥–∞
            input_type = self.detect_input_type(user_input)
            result['input_type'] = input_type

            # –ü–∞—Ä—Å–∏–Ω–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if input_type == 'latex':
                expr = self.parse_latex_expression(user_input)
            else:
                expr = self.parse_mathematical_expression(user_input)

            result['parsed_expression'] = expr
            result['preprocessed'] = str(expr)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è
            validation_result = self.validate_expression(expr)
            result['validation_result'] = validation_result
            result['success'] = validation_result

        except Exception as e:
            error_msg = str(e)
            result['errors'].append(error_msg)

            # –ò–ò –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
            if self.ai and self.ai_settings.ai_error_explanations:
                print(f"{Fore.MAGENTA}ü§ñ –ò–ò –æ–±—ä—è—Å–Ω—è–µ—Ç –æ—à–∏–±–∫—É:")
                ai_explanation = self.ai.explain_error(error_msg, user_input)
                if ai_explanation and "–ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" not in ai_explanation:
                    print(f"{Fore.YELLOW}{ai_explanation}")
                print()

        return result

    def step2_simplify(self, expr: sp.Expr) -> Dict[str, Any]:
        """–≠—Ç–∞–ø 2: –£–ø—Ä–æ—â–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞"""
        result = {
            'stage': '–≠—Ç–∞–ø 2: –£–ø—Ä–æ—â–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è',
            'success': False,
            'original_expression': expr,
            'simplified_expression': None,
            'simplification_steps': {},
            'errors': []
        }

        try:
            steps = {}

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è Derivative –∏ Integral
            if isinstance(expr, (sp.Derivative, sp.Integral)):
                # –î–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –∏ –∏–Ω—Ç–µ–≥—Ä–∞–ª–æ–≤ –ù–ï –≤—ã—á–∏—Å–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                result['simplified_expression'] = expr
                result['simplification_steps'] = {'preserved': '–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è'}
            else:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ log(exp(x)) –ü–ï–†–ï–î –æ–±—ã—á–Ω—ã–º —É–ø—Ä–æ—â–µ–Ω–∏–µ–º
                expr_str = str(expr)

                # –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö —Ç–æ–∂–¥–µ—Å—Ç–≤
                if 'log(exp(' in expr_str:
                    # log(exp(x)) -> x
                    import re
                    pattern = r'log\(exp\(([^)]+)\)\)'
                    match = re.search(pattern, expr_str)
                    if match:
                        var_content = match.group(1)
                        if var_content.strip():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –ø—É—Å—Ç–∞—è
                            try:
                                simplified_expr = sp.sympify(var_content)
                                steps['log_exp_identity'] = simplified_expr
                            except:
                                pass

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—Ä—É–≥–∏—Ö –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö —Ç–æ–∂–¥–µ—Å—Ç–≤
                if 'exp(log(' in expr_str:
                    # exp(log(x)) -> x
                    pattern = r'exp\(log\(([^)]+)\)\)'
                    match = re.search(pattern, expr_str)
                    if match:
                        var_content = match.group(1)
                        if var_content.strip():
                            try:
                                simplified_expr = sp.sympify(var_content)
                                steps['exp_log_identity'] = simplified_expr
                            except:
                                pass

                # –û–±—ã—á–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
                try:
                    steps['basic'] = sp.simplify(expr)
                except:
                    steps['basic'] = expr

                try:
                    steps['expanded'] = sp.expand(expr)
                except:
                    steps['expanded'] = expr

                try:
                    steps['factored'] = sp.factor(expr)
                except:
                    steps['factored'] = expr

                try:
                    steps['cancelled'] = sp.cancel(expr)
                except:
                    steps['cancelled'] = expr

                # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –ø–æ–¥–æ–±–Ω—ã—Ö
                if expr.free_symbols:
                    try:
                        steps['collected'] = sp.collect(expr, list(expr.free_symbols))
                    except:
                        steps['collected'] = expr

                # –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ
                if any(func in expr_str for func in ['sin', 'cos', 'tan', 'sec', 'csc', 'cot']):
                    try:
                        steps['trigsimp'] = sp.trigsimp(expr)
                    except:
                        steps['trigsimp'] = expr

                # –£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ –¥–ª—è SymPy
                if any(func in expr_str for func in ['log', 'exp', 'ln']):
                    try:
                        # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
                        steps['logsimp'] = sp.logcombine(expr, force=True)
                        steps['powersimp'] = sp.powsimp(expr, force=True)
                        steps['expand_log'] = sp.expand_log(expr, force=True)

                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —É–ø—Ä–æ—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–º–µ–Ω—É
                        if 'log(exp(' in expr_str:
                            x = sp.Symbol('x')
                            pattern = sp.log(sp.exp(x))
                            replacement = x
                            steps['log_exp_replace'] = expr.replace(sp.log(sp.exp(sp.Wild('x'))), sp.Wild('x'))
                    except Exception as e:
                        pass

                # –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                candidates = []
                for step_name, step_result in steps.items():
                    if step_result is not None and step_result != expr:
                        candidates.append((step_name, step_result))

                if candidates:
                    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–æ–∂–¥–µ—Å—Ç–≤
                    priority_steps = ['log_exp_identity', 'exp_log_identity', 'log_exp_replace']

                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —à–∞–≥–∏
                    result['simplified_expression'] = expr
                    for priority in priority_steps:
                        for step_name, step_result in candidates:
                            if step_name == priority:
                                result['simplified_expression'] = step_result
                                break
                        if result['simplified_expression'] != expr:
                            break

                    # –ï—Å–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –Ω–µ—Ç, –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–ø–µ—Ä–∞—Ü–∏–π
                    if result['simplified_expression'] == expr:
                        valid_candidates = []
                        for step_name, step_result in candidates:
                            try:
                                ops_count = sp.count_ops(step_result)
                                valid_candidates.append((ops_count, step_result))
                            except:
                                valid_candidates.append((len(str(step_result)), step_result))

                        if valid_candidates:
                            best = min(valid_candidates, key=lambda x: x[0])
                            result['simplified_expression'] = best[1]
                        else:
                            result['simplified_expression'] = expr
                else:
                    result['simplified_expression'] = expr

            # –§–∏–ª—å—Ç—Ä—É–µ–º —à–∞–≥–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            result['simplification_steps'] = {
                k: v for k, v in steps.items()
                if v is not None and v != expr and str(v) != str(expr)
            }
            result['success'] = True

        except Exception as e:
            result['errors'].append(str(e))
            result['simplified_expression'] = expr

        return result

    def step3_solve(self, expr: sp.Expr) -> Dict[str, Any]:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á"""
        result = {
            'stage': '–≠—Ç–∞–ø 3: –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏',
            'success': False,
            'problem_type': None,
            'solutions': None,
            'additional_info': {},
            'errors': []
        }

        try:
            free_symbols = expr.free_symbols

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞ SymPy –ü–ï–†–í–û–û–ß–ï–†–ï–î–ù–û
            if isinstance(expr, sp.Derivative):
                # –≠—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è - –≤—ã—á–∏—Å–ª—è–µ–º –µ—ë
                result['problem_type'] = 'derivative'
                result['solutions'] = expr.doit()
            elif isinstance(expr, sp.Integral):
                # –≠—Ç–æ –∏–Ω—Ç–µ–≥—Ä–∞–ª - –≤—ã—á–∏—Å–ª—è–µ–º –µ–≥–æ
                result['problem_type'] = 'integral'
                result['solutions'] = expr.doit()
            elif isinstance(expr, sp.Eq):
                # –£—Ä–∞–≤–Ω–µ–Ω–∏–µ
                result['problem_type'] = 'equation'
                result['solutions'] = sp.solve(expr, free_symbols)
            elif any(op in str(expr) for op in ['>', '<', '>=', '<=']):
                # –ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ
                result['problem_type'] = 'inequality'
                if len(free_symbols) == 1:
                    var = list(free_symbols)[0]
                    try:
                        result['solutions'] = sp.solve_univariate_inequality(expr, var, relational=False)
                    except:
                        result['solutions'] = sp.solve(expr, var)
            elif not free_symbols:
                # –ß–∏—Å–ª–æ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                result['problem_type'] = 'numerical_evaluation'
                result['solutions'] = expr.evalf()
            else:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —É–ø—Ä–æ—Å—Ç–∏—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
                simplified = sp.simplify(expr)

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
                if any(func in str(expr) for func in ['log', 'exp']):
                    log_simplified = sp.powsimp(sp.logcombine(expr, force=True), force=True)
                    if sp.count_ops(log_simplified) < sp.count_ops(simplified):
                        simplified = log_simplified

                # –ù–û–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–ø—Ä–æ—â–µ–Ω–∏—è
                is_simple_variable = (
                        len(free_symbols) == 1 and
                        len(str(expr).strip()) <= 3 and  # x, y, z –∏ —Ç.–¥.
                        str(expr) in [str(sym) for sym in free_symbols] and
                        isinstance(expr, sp.Symbol)  # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Å–∏–º–≤–æ–ª
                )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É–ø—Ä–æ—â–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                expression_simplified = (
                        simplified != expr and
                        (sp.count_ops(simplified) < sp.count_ops(expr) or str(simplified) != str(expr))
                )

                if is_simple_variable:
                    # –≠—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–ø—Ä–æ—â–µ–Ω–∏—è
                    result['problem_type'] = 'simplification'
                    result['solutions'] = expr
                elif expression_simplified:
                    # –í—ã—Ä–∞–∂–µ–Ω–∏–µ —É–ø—Ä–æ—Å—Ç–∏–ª–æ—Å—å - —ç—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–∞ —É–ø—Ä–æ—â–µ–Ω–∏–µ
                    result['problem_type'] = 'simplification'
                    result['solutions'] = simplified
                else:
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ—à–∏—Ç—å –∫–∞–∫ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ = 0
                    result['problem_type'] = 'equation_zero'
                    if len(free_symbols) == 1:
                        var = list(free_symbols)[0]
                        result['solutions'] = sp.solve(expr, var)
                    else:
                        result['solutions'] = sp.solve(expr, free_symbols)

            result['success'] = True

        except Exception as e:
            result['errors'].append(str(e))
            # Fallback: —É–ø—Ä–æ—â–µ–Ω–∏–µ
            try:
                result['solutions'] = sp.simplify(expr)
                result['problem_type'] = 'simplification'
                result['success'] = True
            except:
                pass

        return result

    def step4_format_output(self, solutions: Any, problem_type: str) -> Dict[str, Any]:
        """–≠—Ç–∞–ø 4: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞"""
        result = {
            'stage': '–≠—Ç–∞–ø 4: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞',
            'success': False,
            'numerical_output': None,
            'latex_output': None,
            'pretty_output': None,
            'errors': []
        }

        try:
            if solutions is not None:
                # –ß–∏—Å–ª–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥
                if hasattr(solutions, 'evalf'):
                    result['numerical_output'] = str(solutions.evalf())
                else:
                    result['numerical_output'] = str(solutions)

                # LaTeX –≤—ã–≤–æ–¥
                try:
                    if hasattr(solutions, '__iter__') and not isinstance(solutions, (str, sp.Basic)):
                        latex_parts = []
                        for sol in solutions:
                            try:
                                latex_parts.append(sp.latex(sol))
                            except:
                                latex_parts.append(str(sol))
                        result['latex_output'] = ', '.join(latex_parts)
                    else:
                        result['latex_output'] = sp.latex(solutions)
                except:
                    result['latex_output'] = str(solutions)

                # –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
                try:
                    result['pretty_output'] = sp.pretty(solutions)
                except:
                    result['pretty_output'] = str(solutions)

                result['success'] = True

        except Exception as e:
            result['errors'].append(str(e))

        return result

    def process_user_input(self, user_input: str, show_steps: bool = True) -> Dict[str, Any]:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
        if show_steps:
            print(f"\n{Fore.CYAN}{'=' * 60}")
            print(f"{Fore.CYAN}–û–ë–†–ê–ë–û–¢–ö–ê –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –í–´–†–ê–ñ–ï–ù–ò–Ø")
            print(f"{Fore.CYAN}{'=' * 60}")
            print(f"{Fore.WHITE}–í—Ö–æ–¥–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {Fore.YELLOW}{user_input}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        final_result = {
            'success': False,
            'original_input': user_input,
            'stages': [],
            'final_answer': None,
            'problem_type': None
        }

        try:
            # –≠—Ç–∞–ø 1: –ü–∞—Ä—Å–∏–Ω–≥ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è
            stage1 = self.step1_parse_and_validate(user_input)
            final_result['stages'].append(stage1)

            if show_steps:
                print(f"\n{Fore.GREEN}‚úì {stage1['stage']}")
                print(f" –¢–∏–ø –≤–≤–æ–¥–∞: {stage1['input_type']}")
                if stage1['success']:
                    print(f" –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {stage1['parsed_expression']}")

                    # –ò–ò –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–∞
                    if self.ai and self.ai_settings.ai_step_explanations:
                        ai_explanation = self.ai.explain_step(
                            "–ü–∞—Ä—Å–∏–Ω–≥", user_input, str(stage1['parsed_expression'])
                        )
                        if ai_explanation and "–ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" not in ai_explanation:
                            print(f"{Fore.MAGENTA}ü§ñ –ò–ò: {Fore.CYAN}{ai_explanation}")
                else:
                    print(f" {Fore.RED}–û—à–∏–±–∫–∏: {stage1['errors']}")
                    return final_result

            expr = stage1['parsed_expression']

            # –≠—Ç–∞–ø 2: –£–ø—Ä–æ—â–µ–Ω–∏–µ
            stage2 = self.step2_simplify(expr)
            final_result['stages'].append(stage2)

            if show_steps:
                print(f"\n{Fore.GREEN}‚úì {stage2['stage']}")
                print(f" –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {stage2['simplified_expression']}")
                if stage2['simplification_steps']:
                    print(f" –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —à–∞–≥–∏:")
                    for step_name, step_result in stage2['simplification_steps'].items():
                        print(f"   {step_name}: {step_result}")

                # –ò–ò –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–∞
                if self.ai and self.ai_settings.ai_step_explanations:
                    ai_explanation = self.ai.explain_step(
                        "–£–ø—Ä–æ—â–µ–Ω–∏–µ", str(expr), str(stage2['simplified_expression'])
                    )
                    if ai_explanation and "–ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" not in ai_explanation:
                        print(f"{Fore.MAGENTA}ü§ñ –ò–ò: {Fore.CYAN}{ai_explanation}")

            simplified_expr = stage2['simplified_expression']

            # –≠—Ç–∞–ø 3: –†–µ—à–µ–Ω–∏–µ
            stage3 = self.step3_solve(simplified_expr)
            final_result['stages'].append(stage3)
            final_result['problem_type'] = stage3['problem_type']

            if show_steps:
                print(f"\n{Fore.GREEN}‚úì {stage3['stage']}")
                print(f" –¢–∏–ø –∑–∞–¥–∞—á–∏: {stage3['problem_type']}")
                print(f" –†–µ—à–µ–Ω–∏–µ: {stage3['solutions']}")

                # –ò–ò –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —ç—Ç–∞–ø–∞
                if self.ai and self.ai_settings.ai_step_explanations:
                    ai_explanation = self.ai.explain_step(
                        f"–†–µ—à–µ–Ω–∏–µ ({stage3['problem_type']})",
                        str(simplified_expr), str(stage3['solutions'])
                    )
                    if ai_explanation and "–ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" not in ai_explanation:
                        print(f"{Fore.MAGENTA}ü§ñ –ò–ò: {Fore.CYAN}{ai_explanation}")

            # –≠—Ç–∞–ø 4: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            stage4 = self.step4_format_output(stage3['solutions'], stage3['problem_type'])
            final_result['stages'].append(stage4)

            if show_steps:
                print(f"\n{Fore.GREEN}‚úì {stage4['stage']}")
                print(f" –ß–∏—Å–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {stage4['numerical_output']}")
                print(f" LaTeX —Ñ–æ—Ä–º–∞—Ç: {stage4['latex_output']}")

            final_result['final_answer'] = stage4
            final_result['success'] = True

        except Exception as e:
            if show_steps:
                print(f"{Fore.RED}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            final_result['error'] = str(e)

            # –ò–ò –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
            if self.ai and self.ai_settings.ai_error_explanations:
                print(f"{Fore.MAGENTA}ü§ñ –ò–ò –æ–±—ä—è—Å–Ω—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É:")
                ai_explanation = self.ai.explain_error(str(e), user_input)
                if ai_explanation and "–ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" not in ai_explanation:
                    print(f"{Fore.YELLOW}{ai_explanation}")

        if show_steps:
            print(f"\n{Fore.CYAN}{'=' * 60}")

        return final_result


def print_usage_instructions():
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    instructions = f"""

{Fore.CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
{Fore.CYAN}‚ïë –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –í–í–û–î–£ –í–´–†–ê–ñ–ï–ù–ò–ô                                                   ‚ïë
{Fore.CYAN}‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
{Fore.CYAN}‚ïë                                                                                  ‚ïë
{Fore.CYAN}‚ïë 1. –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–ú–´–ï –§–û–†–ú–ê–¢–´ –í–í–û–î–ê:                                                ‚ïë
{Fore.CYAN}‚ïë                                                                                  ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ Plain Text (–æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç)                                                   ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ LaTeX (–º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞)                                              ‚ïë
{Fore.CYAN}‚ïë                                                                                  ‚ïë
{Fore.CYAN}‚ïë 2. –ü–†–ò–ú–ï–†–´ –í–í–û–î–ê –í –§–û–†–ú–ê–¢–ï PLAIN TEXT:                                          ‚ïë
{Fore.CYAN}‚ïë                                                                                  ‚ïë
{Fore.CYAN}‚ïë   –£—Ä–∞–≤–Ω–µ–Ω–∏—è:                                                                     ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ x^2 + 4*x = -8                                                               ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ 2*x + 3 = 7                                                                  ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ sin(x) = 0.5                                                                 ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ x^2 - 4 = 0                                                                  ‚ïë
{Fore.CYAN}‚ïë                                                                                  ‚ïë
{Fore.CYAN}‚ïë   –ù–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞:                                                                   ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ x^2 - 4 > 0                                                                  ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ 2*x + 1 <= 5                                                                 ‚ïë
{Fore.CYAN}‚ïë                                                                                  ‚ïë
{Fore.CYAN}‚ïë   –í—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è:                                                       ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ x^2 + 2*x + 1                                                                ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ sin^2(x) + cos^2(x)                                                          ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ (x+1)*(x-1)                                                                  ‚ïë
{Fore.CYAN}‚ïë                                                                                  ‚ïë
{Fore.CYAN}‚ïë   –§—É–Ω–∫—Ü–∏–∏ SymPy:                                                                 ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ diff(x^3, x) (–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è)                                                   ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ integrate(x^2, x) (–∏–Ω—Ç–µ–≥—Ä–∞–ª)                                                 ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ factorial(5) (—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª)                                                     ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ sqrt(16) (–∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å)                                                 ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ log(e^x) (–ª–æ–≥–∞—Ä–∏—Ñ–º)                                                          ‚ïë
{Fore.CYAN}‚ïë                                                                                  ‚ïë
{Fore.CYAN}‚ïë 4. –ò–ò –ö–û–ú–ê–ù–î–´:                                                                   ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ llm, ollama, ai, –∏–∏, –ª–ª–º - –¥–∏–∞–ª–æ–≥ —Å –ò–ò –ø–æ–º–æ—â–Ω–∏–∫–æ–º                           ‚ïë
{Fore.CYAN}‚ïë                                                                                  ‚ïë
{Fore.CYAN}‚ïë 5. –ö–û–ú–ê–ù–î–´:                                                                      ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞                                                           ‚ïë
{Fore.CYAN}‚ïë   ‚Ä¢ quit/exit - –≤—ã—Ö–æ–¥                                                            ‚ïë
{Fore.CYAN}‚ïë                                                                                  ‚ïë
{Fore.CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

"""
    print(instructions)


def interactive_mode():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≥—Ä–∞–º–º–æ–π"""
    processor = AdvancedMathProcessor()

    print(f"{Fore.CYAN}{'=' * 80}")
    print(f"{Fore.CYAN}–ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–®–ê–¢–ï–õ–¨ –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–• –ó–ê–î–ê–ß")
    print(f"{Fore.CYAN}{'=' * 80}")
    print(f"{Fore.WHITE}–í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π")
    print(f"{Fore.WHITE}–í–≤–µ–¥–∏—Ç–µ 'quit' –∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print(f"{Fore.WHITE}–ò–ò –∫–æ–º–∞–Ω–¥—ã: llm, ollama, ai, –∏–∏, –ª–ª–º")
    print(f"{Fore.CYAN}{'=' * 80}")

    while True:
        try:
            user_input = input(f"\n{Fore.GREEN}–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: {Fore.WHITE}")

            if user_input.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥']:
                print(f"{Fore.YELLOW}–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif user_input.lower() in ['help', '–ø–æ–º–æ—â—å']:
                print_usage_instructions()
                continue
            elif user_input.lower() in ['llm', 'ollama', 'ai', '–∏–∏', '–ª–ª–º']:
                if processor.ai:
                    processor.ai.interactive_mode()
                else:
                    print(f"{Fore.RED}–ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (Ollama –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)")
                continue
            elif user_input.strip() == '':
                continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            result = processor.process_user_input(user_input, show_steps=True)

            if result['success']:
                print(f"\n{Fore.GREEN}üéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
                print(f"{Fore.WHITE}–¢–∏–ø –∑–∞–¥–∞—á–∏: {Fore.CYAN}{result['problem_type']}")

                final_answer = result['final_answer']
                if final_answer['numerical_output']:
                    print(f"{Fore.WHITE}–ß–∏—Å–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {Fore.YELLOW}{final_answer['numerical_output']}")
                if final_answer['latex_output']:
                    print(f"{Fore.WHITE}LaTeX —Ñ–æ—Ä–º–∞—Ç: {Fore.MAGENTA}{final_answer['latex_output']}")
                if final_answer['pretty_output']:
                    print(f"{Fore.WHITE}–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥:")
                    print(f"{Fore.CYAN}{final_answer['pretty_output']}")
            else:
                print(f"{Fore.RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
                if 'error' in result:
                    print(f"{Fore.RED}–û—à–∏–±–∫–∞: {result['error']}")

        except KeyboardInterrupt:
            print(f"\n{Fore.YELLOW}–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"{Fore.RED}–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    processor = AdvancedMathProcessor()

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    test_cases = [
        "x^2 + 4*x - 8",  # –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
        "sin^2(x) + cos^2(x)",  # –¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ —Ç–æ–∂–¥–µ—Å—Ç–≤–æ
        "integrate(x^2, x)",  # –ò–Ω—Ç–µ–≥—Ä–∞–ª
        "diff(x^3 + 2*x, x)",  # –ü—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è
        "x^2 - 4 = 0",  # –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ
        "2*x + 3 = 7",  # –õ–∏–Ω–µ–π–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ
        "sqrt(16)",  # –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –∫–æ—Ä–µ–Ω—å
        "factorial(5)",  # –§–∞–∫—Ç–æ—Ä–∏–∞–ª
        "log(E)",  # –õ–æ–≥–∞—Ä–∏—Ñ–º
        "pi + E"  # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    ]

    print(f"\n{Fore.MAGENTA}{'=' * 80}")
    print(f"{Fore.MAGENTA}–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print(f"{Fore.MAGENTA}{'=' * 80}")

    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{Fore.CYAN}–ü—Ä–∏–º–µ—Ä {i}:")
        result = processor.process_user_input(test_case, show_steps=True)

        if result['success']:
            print(f"{Fore.GREEN}‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            if result['final_answer']['latex_output']:
                print(f"{Fore.YELLOW}LaTeX —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result['final_answer']['latex_output']}")
        else:
            print(f"{Fore.RED}‚úó –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        print("-" * 60)


if __name__ == "__main__":
    print(f"{Fore.CYAN}üöÄ –ó–ê–ü–£–°–ö –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–†–û–¶–ï–°–°–û–†–ê")
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("2. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º")

    choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º (1/2): ").strip()

    if choice == "1":
        main()
    elif choice == "2":
        interactive_mode()
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∑–∞–ø—É—Å–∫–∞—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º...")
        interactive_mode()
